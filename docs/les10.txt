# Карл: Здравствуйте. Меня зовут Карл. Я - бот-учитель, моя цель - научитнь всех желающих создавать ботов. Вы готовы начать обучение? Если готовы, пожалуйста напишите "да", если не готовы, напишите "нет".

# да
# Карл: Отлично. Тогда пожалуйста напишите, как вы предпочитаете, чтобы я к вам обращался, на вы или на ты? Пожалуйста напишите "обращайся ко мне на вы" или "обращайся ко мне на ты".

# обращайся ко мне на ты
# Карл: Принято. Ты всегда можешь это изменить, если напишешь мне "обращайся ко мне на вы".

# Карл: Теперь мы можем приступить к Уроку 1. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 1.
===============================================================================

# Карл: Урок 1. На первом уроке создадим своего бота. Пока что бот не будет делать ничего полезного, он будет просто запускаться и сразу же прекращать работу.

# Карл: Прежде всего условимся, что выбранный язык программирования - JavaScript. На данный момент этот язык является стандартом для всех современных браузеров, им владеют многие программисты.

# Карл: Справа ты видишь три панели. Основная панель - это редактор кода, под ней находится панель управления с кнопками, под ней - панель с терминалом бота. Сейчас мы научимся всем этим пользоваться.

# Карл: Пожалуйста обрати внимание на редактор кода. Там уже есть некоторый код, который необходим для функционирования бота.

-------------------------------------------------
function MyBot() {}
-------------------------------------------------

# Карл: На первых уроках можно не вникать в детали создания объектов, функций и прототипов, это будет объяснено позже. Пока что просто прийми для себя, что бот - это некий объект, имеющий некие функции. Объект в JavaScript можно создать несколькими способами, в данном случае мы это делаем с помощью функции-конструктора.

# Карл: Сначала нужно задать имя объекта. Именем является идентификатор, который может включать в себя латинские буквы, цифры и символы подчеркивания. Но начинаться идентификатор может только или с буквы или с символа подчеркивания. Пример правильных идентификаторов: "MyBot", "Bot2", "__Bot__" и т.д.

# Карл: Задай имя объекта. Замени в редакторе кода идентификатор MyBot на любой другой, который тебе нравится.

# Карл: Очень хорошо! Теперь запусти бота. Обрати внимание на панель под редактором кода. Там есть кнопка "Запустить". Нажми её. Далее просто смотри в терминале ниже что получится.

-------------------------------------------------
[Начало сеанса]
-------------------------------------------------

# Карл: Так, бот запустился. Теперь заверши его работу, нажми кнопку "Остановить".

-------------------------------------------------
[Конец сеанса]
-------------------------------------------------

# Карл: Отлично! Ты создал бота, который умеет запускаться. Урок 1 выполнен. Теперь мы можем приступить к Уроку 2 и научим бота здороваться. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 2.
===============================================================================

# Карл: Урок 1. На предыдущем уроке ты создал бота, который умеет запускаться. Хорошой бот - это вежливый бот, поэтому теперь научи его здороваться. Это единственное, что он пока что будет уметь делать.

-------------------------------------------------
function MyBot() {}

MyBot.prototype.start = function()
{
    return 'тут напиши текст приветствия'
}
-------------------------------------------------

# Карл: Повторим для себя, бот - это некий объект, имеющий некие функции. Точнее, в данном случае только одну функцию: start. Эта функция выполняется каждый раз при запуске бота, и возвращает текст приветствия, который должен выдать твой бот.

# Карл: Текст, который будет возвращен функцией, находится после ключевого слова return в одинарных кавычках. Можно было бы использовать и двойные кавычки, но пока пусть будут одинарные, чтобы придерживаться одного стиля. Ключевое слово return обязательно, оно означает, что следующий на ним текст будет возвращен функцией.

# Карл: Измени этот текст в редакторе кода, пусть бот приветствует тебя так, как ты хочешь. Например 'Привет, хозяин!'.

# Карл: Ты изменил текст, очень хорошо. Теперь запусти своего бота.

-------------------------------------------------
[Начало сеанса]
MyBot# Привет, хозяин!
-------------------------------------------------

# Карл: Теперь заверши его работу, нажми кнопку "Остановить".

-------------------------------------------------
[Конец сеанса]
-------------------------------------------------

# Карл: Отлично! Ты создал бота, который умеет запускаться и здороваться. Урок 2 выполнен.

# Карл: Теперь мы можем приступить к Уроку 3 и научим бота прощаться. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 3.
===============================================================================

# Карл: Урок 2. На предыдущем уроке ты создал бота, который умеет запускаться и здороваться. Так как, повторюсь, хорошой бот - это вежливый бот, теперь научи его прощаться.

# Карл: Посмотри на редактор кода. В данном случае код бота имеет только еще одну функцию: stop. Эта функция выполняется перед остановкой бота, и возвращает текст прощания, который должен выдать бот.

-------------------------------------------------
function MyBot() {}

MyBot.prototype.start = function()
{
    return 'Привет, хозяин!'
}

MyBot.prototype.stop = function()
{
    return 'тут напиши текст прощания'
}
-------------------------------------------------

# Карл: Еще раз обрати внимание на ключевое слово return, на этот раз в функции stop, и на текст в кавычках. Измени этот текст! Например, на "Приходи поскорее..."

# Карл: Кстати, никто не мешает изменить ранее введенный код. Например, можешь изменить текст в функции start например на "С возвращением!"

# Карл: Теперь запусти бота.

-------------------------------------------------
[Начало сеанса]
MyBot# С возвращением!
-------------------------------------------------

# Карл: Теперь заверши его работу, нажми кнопку "Остановить".

-------------------------------------------------
MyBot# Приходи поскорее...
[Конец сеанса]
-------------------------------------------------

# Карл: Отлично! Ты создал бота, который умеет запускаться, здороваться и прощаться. Урок 3 выполнен.

# Карл: Теперь мы можем приступить к Уроку 4 и научим бота отвечать на сообщения. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 4.
===============================================================================

# Карл: Урок 4. На предыдущем уроке ты создал бота, который умеет запускаться, здороваться и прощаться. Вот только было бы хорошо, чтобы бот не был молчаливым, молчаливый бот никому не нужен. Поэтому теперь научи его отвечать на сообщения. Пока что сделаем просто, пусть бот на любой вопрос всегда отвечает одну и ту же фразу, позже можно будет задать более сложное поведение.

# Карл: Посмотри на редактор кода. Туда добавилась функция process, которая будет вызываться каждый раз, когда твой бот будет получать строку текста (message).

-------------------------------------------------
function MyBot() {}

MyBot.prototype.start = function()
{
    return 'С возвращением!'
}

MyBot.prototype.stop = function()
{
    return 'Приходи поскорее...'
}

MyBot.prototype.process = function(message)
{
    return 'тут напиши любой текст ответа'
}
-------------------------------------------------

# Карл: Функция process принимает параметр message, содержащий строку текста, которую ты будешь вводить в терминале бота, и на которую бот должен будет реагировать. Пока что не обращай на этот параметр внимание, мы вернемся к этому на следующих уроках.

# Карл: Измени текст, который возвращает функция process. Например, "Да"

# Карл: Запусти бота. Обрати внимание, теперь бот ждет, когда ты что-то введешь в терминале! Введи какой-нибудь текст, например вопрос "ты бот?" или "как дела?".

-------------------------------------------------
[Начало сеанса]
MyBot# С возвращением!
(...)# ты бот?
MyBot# Да
(...)# скажи еще что-нибудь
MyBot# Да
(...)# как дела?
MyBot# Да
-------------------------------------------------

# Карл: Достаточно, уже видно, что бот работает и реагирует на твои сообщения. Теперь останови бота.

-------------------------------------------------
MyBot# Приходи поскорее...
[Конец сеанса]
-------------------------------------------------

# Карл: Отлично! Ты создал бота, который умеет отвечать на сообщения. Урок 4 выполнен.

# Карл: Теперь мы можем приступить к Уроку 5 и научим бота отвечать более разнообразно. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 5.
===============================================================================

# Карл: Урок 5. На предыдущем уроке ты создал бота, который умеет отвечать на сообщения. Вот только отвечает от всегда одно и то же, это скучновато. Пусть он отвечает той же фразой, которая ему и была задана, то есть будет работать как эхо.

# Карл: Еще раз посмотри на функцию process. У нее есть параметр с именем (идентификатором) message, в прошлый раз я уже говорил, этот параметр содержит строку текста, которую ты будешь вводить в терминале бота, на которую бот должен будет реагировать.

# Карл: Просто подставь этот параметр на выход функции progress вместо текста! То есть сотри текст в кавычках после ключевого слова return, да, и кавычки тоже сотри, и вместо этого напиши там имя параметра message.

-------------------------------------------------
function MyBot() {}

MyBot.prototype.start = function()
{
    return 'С возвращением!'
}

MyBot.prototype.stop = function()
{
    return 'Приходи поскорее...'
}

MyBot.prototype.process = function(message)
{
    return message
}
-------------------------------------------------

# Карл: Запусти бота и вводи в терминале разные вопросы.

-------------------------------------------------
[Начало сеанса]
MyBot# С возвращением!
(...)# ты бот?
MyBot# ты бот?
(...)# как дела?
MyBot# как дела?
-------------------------------------------------

# Карл: Отлично! Можешь остановить бота.

# Карл: Итак, ты создал бота, который умеет однотипно отвечать на любые сообщения. Урок 5 выполнен.

# Карл: Теперь мы можем приступить к Уроку 6 и научим бота отвечать только на заданный вопросы. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 6.
===============================================================================

# Карл: Урок 6. На предыдущих уроках ты создал бота, который умеет однотипно отвечать на все сообщения как одним и тем же текстом, там и эхом. Теперь научим его отвечать особым образом на определенный заданный вопрос.

# Карл: Посмотри на редактор кода. Обрати внимание, в функцию process добавился блок кода с ключевым словом if. Оно обозначает, что за ним идет условие, при соблюдении которого необходимо совершить некоторое действие.

-------------------------------------------------
[...]
MyBot.prototype.process = function(message)
{
    if (message == 'тут напиши вопрос боту') {
        return 'тут напиши ответ бота'
    }

    return message
}
-------------------------------------------------

# Карл: В данном случае код проверяет, будет ли параметр message равен некоторому тексту. Обрати внимание, равенство в JavaScript проверяется двойным равно ==, и текст опять-таки задается в одинарных кавычках. Если message равен тексту, то выполняется действие, в данном случае бот это действие возвращает другой текст. Если условие не выполняется, управление передается дальше, и выполняется следующее действие, а именно, выведется эхо, как и на предыдущем уроке.

# Карл: Измени оба текста в функции process, то есть текст, на который бот будет проверяеть входные вопросы (например "ты бот?"), и текст, который бот будет возвращать (например "да").

# Карл: Запусти бота, потом задай боту вопрос, который бот ожидает, а потом задай любой вопрос, отличающийся от заданного, потом снова вопрос, который бот ожидает. Посмотри что получится.

-------------------------------------------------
[Начало сеанса]
MyBot# С возвращением!
(...)# ты бот?
MyBot# да
(...)# как дела?
MyBot# как дела?
(...)# ты бот?
MyBot# да
-------------------------------------------------

# Карл: Отлично! Можешь остановить бота.

# Карл: Итак, ты создал бота, который умеет реагировать определенным образом на заданный вопрос. Урок 6 выполнен.

# Карл: Теперь мы можем приступить к Уроку 7 и научим бота иногда молчать. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 7.
===============================================================================

# Карл: Урок 7. На предыдущем уроке ты создал бота, который реагировал на любое сообщение. Теперь научим его отвечать только на определенный заданный вопрос и не реагировать на остальные вопросы.

# Карл: Это просто. Оставь в коде только реакцию на свой вопрос, и удали остальное (в данном случае строку с return message).

-------------------------------------------------
[...]
MyBot.prototype.process = function(message)
{
    if (message == 'ты бот?') {
        return 'да'
    }
}
-------------------------------------------------

# Карл: В данном случае код проверяет, будет ли параметр message равен некоторому тексту. Если message равен этому тексту, то выполняется действие. Если условие не выполняется, то функция не возвращает ничего и завершает работу (примечание: на самом деле в этом случае функция возвращает пустое неопределенное значение undefined, но пока это можно не учитывать, мы рассмотрим эту тему в последующих уроках).

# Карл: Запусти бота, потом задай боту вопрос, который бот ожидает, а потом задай несколько вопросов, отличающихся от заданного, который бот ожидает. Посмотри что получится.

-------------------------------------------------
[Начало сеанса]
MyBot# С возвращением!
(...)# ты бот?
MyBot# да
(...)# как дела?
(...)# почему не отвечаешь?
(...)# ты бот?
MyBot# да
-------------------------------------------------

# Карл: Отлично! Можешь остановить бота.

# Карл: Итак, ты создал бота, который умеет реагировать определенным образом только и исключительно на заданный вопрос. Урок 7 выполнен.

# Карл: Теперь мы можем приступить к Уроку 8 и научим бота отвечать на более чем один вопрос. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 8.
===============================================================================

# Карл: Урок 8. На предыдущем уроке ты создал бота, который реагировал на определенное сообщение. Теперь научим его отвечать на два определенных вопроса.

# Карл: Посмотри на редактор кода. Обрати внимание, в функцию process добавился еще один блок кода с другим ключевое слово if.

-------------------------------------------------
[...]
MyBot.prototype.process = function(message)
{
    if (message == 'ты бот?') {
        return 'да'
    }

    if (message == 'тут напиши другой вопрос боту') {
        return 'тут напиши ответ бота'
    }
}
-------------------------------------------------

# Карл: Измени тексты в функции process, например добавь вопрос "как дела?" и ответ на него "хорошо".

# Карл: Запусти бота, позадавай ему разные вопросы, как оба заданных, так и какие-нибудь другие.

-------------------------------------------------
[Начало сеанса]
MyBot# С возвращением!
(...)# ты бот?
MyBot# да
(...)# как дела?
MyBot# хорошо
(...)# как поживаешь?
(...)# все в порядке?
(...)# ты бот?
MyBot# да
-------------------------------------------------

# Карл: Отлично! Можешь остановить бота.

# Карл: Итак, ты создал бота, который умеет реагировать определенным образом на два различных заданных вопроса. Урок 8 выполнен.

# Карл: Теперь мы можем приступить к Уроку 9 и научим бота отвечать на большее количество вопросов. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 9.
===============================================================================

# Карл: Урок 9. На предыдущем уроке ты создал бота, который реагировал на два различных заданных вопроса. Теперь научим его отвечать на большее количество вопросов.

# Карл: Добавь в редакторе кода функцию process больше блоков if, пусть будет не мерее 5 вариантов вопросов и ответов.

-------------------------------------------------
[...]
MyBot.prototype.process = function(message)
{
    if (message == 'ты бот?') {
        return 'да'
    }

    if (message == 'как дела?') {
        return 'хорошо'
    }

    if (message == 'тут напиши другой вопрос боту') {
        return 'тут напиши ответ бота'
    }
}
-------------------------------------------------

# Карл: Ты написал только 3 варианта вопросов и ответов, а по условию задания нужно чтобы было не менее 5 вариантов.

# Карл: Хорошо. Теперь запусти бота, позадавай ему разные вопросы, как заданные, так и какие-нибудь другие.

-------------------------------------------------
[Начало сеанса]
MyBot# С возвращением!
(...)# ты бот?
MyBot# да
(...)# как дела?
MyBot# хорошо
(...)# как поживаешь?
MyBot# отлично
(...)# все в порядке?
(...)# все в порядке?
(...)# как дела?
MyBot# хорошо
-------------------------------------------------

# Карл: Отлично! Можешь остановить бота.

# Карл: Итак, ты создал бота, который умеет реагировать на некоторое количество различных заданных вопросов. Урок 9 выполнен.

# Карл: Теперь мы можем приступить к Уроку 10, в котором перепишем этот же код с использованием дополнительной переменой. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 10.
===============================================================================

# Карл: Урок 10. На предыдущем уроке ты создал бота, который реагировал на некоторое количество различных заданных вопросов. Как видишь, кода получилось довольно много, причем функция process имеет одну точку входа (её начало), несколько точек выхода (каждый return). Это не очень наглядно, особенно если кода будет еще больше, и в ряде случаев имеет смысл этого избегать.

# Карл: Этот урок будет сложнее предыдущих, но он очень важен, приготовься.

# Карл: Итак, посмотри на редактор кода. Обрати внимание, в начале тела функции process добавился блок кода var answer = ''. Это означает, что мы объявляем переменную с именем (идентификатором) answer. Переменная - это именованная ячейка памяти (то есть к которой мы можем обращаться по имени), которая может содержать различные, то есть переменные, способные изменяться, значения.

-------------------------------------------------
[...]
MyBot.prototype.process = function(message)
{
    var answer = ''

    if (message == 'тут напиши другой вопрос боту') {
        answer = 'тут напиши ответ бота'
    }

    if (message == 'ты бот?') {
        return 'да'
    }

    if (message == 'как дела?') {
        return 'хорошо'
    }

    if (message == 'как поживаешь?') {
        return 'отлично'
    }

    [...]

    return answer
}
-------------------------------------------------
# Карл: Оператор присваивания answer = '' означает, что мы присваиваем некоторое значение этой переменной, в данном случае - начальное значение, являющееся пустой строкой.

# Карл: После задания переменной в качестве примера добавился еще один блок if, в котором вместо выхода из функции и возврата значения return 'строка' используется присваивание answer = 'строка'. Это значит, что при соблюдении условия блока if не будет осуществлен выход из функции, как было раньше, а лишь переменной answer будет присвоено значение строки. Если условие блока if не будет соблюдено, то переприсваивания не будет и в переменной answer останется старое значение - пустая строка.

# Карл: Можешь изменить вопрос и ответ в этом добавленном блоке на что-нибудь другое.

# Карл: Далее, обрати внимание, в конце добавилось уже известное ключевое слово return, наконец-то возвращающее значение переменной answer. Это-то и будет та единственная точка выхода из функции, которую мы сейчас оставим. Пока что эту строку не трогай.

# Карл: Теперь измени код, чтобы была только одна точка выхода. Для этого в блоках if вместо return 'строка' делай присваивания answer = 'строка', как и в предыдущем блоке if.

# Карл: Запомни, ключевое слово var, объявляющее локальную переменную, нужно делать в функции только один раз, в начале. (примечание: локальная переменная - это значит, что переменная используется только в текущей функции и недоступна извне этой функции).

# Карл: Хорошо. Теперь, если мы запустим код в таком виде, то бот будет визуально вести себя как и раньше, плюс добавился еще дополнительный вопрос/ответ из нового блока if.

# Карл: Еще одна деталь. Если ввести незнакомый вопрос, функция process вместо неопределенного значения вернет изначально заданное пустое значение переменной answer. При этом функция тоже ничего не выведет, как и раньше (неопределеное значение undefined практически так же обозначает ничего, как и пустая строка, при этом технические отличия есть, но об этом будет в следующих уроках).

# Карл: Хорошо. Теперь запусти бота, позадавай ему разные вопросы, как заданные, так и какие-нибудь другие.

-------------------------------------------------
[Начало сеанса]
MyBot# С возвращением!
(...)# ты бот?
MyBot# да
(...)# как дела?
MyBot# хорошо
(...)# как поживаешь?
MyBot# отлично
(...)# все в порядке?
(...)# все в порядке?
(...)# как дела?
MyBot# хорошо
-------------------------------------------------

# Карл: Отлично! Можешь остановить бота.

# Карл: Итак, ты создал бота, который может использовать переменные. Урок 10 выполнен.

# Карл: Теперь мы можем приступить к Уроку 11, в котором перепишем этот же код с использованием более удобной языковой конструкции. Готов? Пожалуйста напиши "да" или "нет".

# да


===============================================================================
Урок 11.
===============================================================================

TODO: разработай урок 11 с switch/case

TODO: урок 10 получился сложным, возможно имеет смысл разбить его на два или даже три урока, или вообще его переделать

